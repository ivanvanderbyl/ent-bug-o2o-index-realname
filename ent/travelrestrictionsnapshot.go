// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ivanvanderbyl/entbug/ent/travelrestrictionsnapshot"
)

// TravelRestrictionSnapshot is the model entity for the TravelRestrictionSnapshot schema.
type TravelRestrictionSnapshot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version int64 `json:"version,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]ent.Value `json:"data,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TravelRestrictionSnapshotQuery when eager-loading is set.
	Edges                                TravelRestrictionSnapshotEdges `json:"edges"`
	travel_restriction_snapshot_previous *int
}

// TravelRestrictionSnapshotEdges holds the relations/edges for other nodes in the graph.
type TravelRestrictionSnapshotEdges struct {
	// Next holds the value of the next edge.
	Next *TravelRestrictionSnapshot `json:"next,omitempty"`
	// Previous holds the value of the previous edge.
	Previous *TravelRestrictionSnapshot `json:"previous,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NextOrErr returns the Next value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TravelRestrictionSnapshotEdges) NextOrErr() (*TravelRestrictionSnapshot, error) {
	if e.loadedTypes[0] {
		if e.Next == nil {
			// The edge next was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: travelrestrictionsnapshot.Label}
		}
		return e.Next, nil
	}
	return nil, &NotLoadedError{edge: "next"}
}

// PreviousOrErr returns the Previous value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TravelRestrictionSnapshotEdges) PreviousOrErr() (*TravelRestrictionSnapshot, error) {
	if e.loadedTypes[1] {
		if e.Previous == nil {
			// The edge previous was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: travelrestrictionsnapshot.Label}
		}
		return e.Previous, nil
	}
	return nil, &NotLoadedError{edge: "previous"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TravelRestrictionSnapshot) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case travelrestrictionsnapshot.FieldData:
			values[i] = &[]byte{}
		case travelrestrictionsnapshot.FieldID, travelrestrictionsnapshot.FieldVersion:
			values[i] = &sql.NullInt64{}
		case travelrestrictionsnapshot.FieldTimestamp:
			values[i] = &sql.NullTime{}
		case travelrestrictionsnapshot.ForeignKeys[0]: // travel_restriction_snapshot_previous
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TravelRestrictionSnapshot", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TravelRestrictionSnapshot fields.
func (trs *TravelRestrictionSnapshot) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case travelrestrictionsnapshot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			trs.ID = int(value.Int64)
		case travelrestrictionsnapshot.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				trs.Version = value.Int64
			}
		case travelrestrictionsnapshot.FieldData:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &trs.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %v", err)
				}
			}
		case travelrestrictionsnapshot.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				trs.Timestamp = value.Time
			}
		case travelrestrictionsnapshot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field travel_restriction_snapshot_previous", value)
			} else if value.Valid {
				trs.travel_restriction_snapshot_previous = new(int)
				*trs.travel_restriction_snapshot_previous = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNext queries the "next" edge of the TravelRestrictionSnapshot entity.
func (trs *TravelRestrictionSnapshot) QueryNext() *TravelRestrictionSnapshotQuery {
	return (&TravelRestrictionSnapshotClient{config: trs.config}).QueryNext(trs)
}

// QueryPrevious queries the "previous" edge of the TravelRestrictionSnapshot entity.
func (trs *TravelRestrictionSnapshot) QueryPrevious() *TravelRestrictionSnapshotQuery {
	return (&TravelRestrictionSnapshotClient{config: trs.config}).QueryPrevious(trs)
}

// Update returns a builder for updating this TravelRestrictionSnapshot.
// Note that you need to call TravelRestrictionSnapshot.Unwrap() before calling this method if this TravelRestrictionSnapshot
// was returned from a transaction, and the transaction was committed or rolled back.
func (trs *TravelRestrictionSnapshot) Update() *TravelRestrictionSnapshotUpdateOne {
	return (&TravelRestrictionSnapshotClient{config: trs.config}).UpdateOne(trs)
}

// Unwrap unwraps the TravelRestrictionSnapshot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (trs *TravelRestrictionSnapshot) Unwrap() *TravelRestrictionSnapshot {
	tx, ok := trs.config.driver.(*txDriver)
	if !ok {
		panic("ent: TravelRestrictionSnapshot is not a transactional entity")
	}
	trs.config.driver = tx.drv
	return trs
}

// String implements the fmt.Stringer.
func (trs *TravelRestrictionSnapshot) String() string {
	var builder strings.Builder
	builder.WriteString("TravelRestrictionSnapshot(")
	builder.WriteString(fmt.Sprintf("id=%v", trs.ID))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", trs.Version))
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", trs.Data))
	builder.WriteString(", timestamp=")
	builder.WriteString(trs.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TravelRestrictionSnapshots is a parsable slice of TravelRestrictionSnapshot.
type TravelRestrictionSnapshots []*TravelRestrictionSnapshot

func (trs TravelRestrictionSnapshots) config(cfg config) {
	for _i := range trs {
		trs[_i].config = cfg
	}
}

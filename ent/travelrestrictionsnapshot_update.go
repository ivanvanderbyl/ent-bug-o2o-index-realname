// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ivanvanderbyl/entbug/ent/predicate"
	"github.com/ivanvanderbyl/entbug/ent/travelrestrictionsnapshot"
)

// TravelRestrictionSnapshotUpdate is the builder for updating TravelRestrictionSnapshot entities.
type TravelRestrictionSnapshotUpdate struct {
	config
	hooks    []Hook
	mutation *TravelRestrictionSnapshotMutation
}

// Where adds a new predicate for the TravelRestrictionSnapshotUpdate builder.
func (trsu *TravelRestrictionSnapshotUpdate) Where(ps ...predicate.TravelRestrictionSnapshot) *TravelRestrictionSnapshotUpdate {
	trsu.mutation.predicates = append(trsu.mutation.predicates, ps...)
	return trsu
}

// SetNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID.
func (trsu *TravelRestrictionSnapshotUpdate) SetNextID(id int) *TravelRestrictionSnapshotUpdate {
	trsu.mutation.SetNextID(id)
	return trsu
}

// SetNillableNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsu *TravelRestrictionSnapshotUpdate) SetNillableNextID(id *int) *TravelRestrictionSnapshotUpdate {
	if id != nil {
		trsu = trsu.SetNextID(*id)
	}
	return trsu
}

// SetNext sets the "next" edge to the TravelRestrictionSnapshot entity.
func (trsu *TravelRestrictionSnapshotUpdate) SetNext(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotUpdate {
	return trsu.SetNextID(t.ID)
}

// SetPreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID.
func (trsu *TravelRestrictionSnapshotUpdate) SetPreviousID(id int) *TravelRestrictionSnapshotUpdate {
	trsu.mutation.SetPreviousID(id)
	return trsu
}

// SetNillablePreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsu *TravelRestrictionSnapshotUpdate) SetNillablePreviousID(id *int) *TravelRestrictionSnapshotUpdate {
	if id != nil {
		trsu = trsu.SetPreviousID(*id)
	}
	return trsu
}

// SetPrevious sets the "previous" edge to the TravelRestrictionSnapshot entity.
func (trsu *TravelRestrictionSnapshotUpdate) SetPrevious(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotUpdate {
	return trsu.SetPreviousID(t.ID)
}

// Mutation returns the TravelRestrictionSnapshotMutation object of the builder.
func (trsu *TravelRestrictionSnapshotUpdate) Mutation() *TravelRestrictionSnapshotMutation {
	return trsu.mutation
}

// ClearNext clears the "next" edge to the TravelRestrictionSnapshot entity.
func (trsu *TravelRestrictionSnapshotUpdate) ClearNext() *TravelRestrictionSnapshotUpdate {
	trsu.mutation.ClearNext()
	return trsu
}

// ClearPrevious clears the "previous" edge to the TravelRestrictionSnapshot entity.
func (trsu *TravelRestrictionSnapshotUpdate) ClearPrevious() *TravelRestrictionSnapshotUpdate {
	trsu.mutation.ClearPrevious()
	return trsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (trsu *TravelRestrictionSnapshotUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(trsu.hooks) == 0 {
		affected, err = trsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TravelRestrictionSnapshotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			trsu.mutation = mutation
			affected, err = trsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(trsu.hooks) - 1; i >= 0; i-- {
			mut = trsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (trsu *TravelRestrictionSnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := trsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (trsu *TravelRestrictionSnapshotUpdate) Exec(ctx context.Context) error {
	_, err := trsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trsu *TravelRestrictionSnapshotUpdate) ExecX(ctx context.Context) {
	if err := trsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (trsu *TravelRestrictionSnapshotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   travelrestrictionsnapshot.Table,
			Columns: travelrestrictionsnapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: travelrestrictionsnapshot.FieldID,
			},
		},
	}
	if ps := trsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if trsu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   travelrestrictionsnapshot.NextTable,
			Columns: []string{travelrestrictionsnapshot.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := trsu.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   travelrestrictionsnapshot.NextTable,
			Columns: []string{travelrestrictionsnapshot.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if trsu.mutation.PreviousCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   travelrestrictionsnapshot.PreviousTable,
			Columns: []string{travelrestrictionsnapshot.PreviousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := trsu.mutation.PreviousIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   travelrestrictionsnapshot.PreviousTable,
			Columns: []string{travelrestrictionsnapshot.PreviousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, trsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travelrestrictionsnapshot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TravelRestrictionSnapshotUpdateOne is the builder for updating a single TravelRestrictionSnapshot entity.
type TravelRestrictionSnapshotUpdateOne struct {
	config
	hooks    []Hook
	mutation *TravelRestrictionSnapshotMutation
}

// SetNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetNextID(id int) *TravelRestrictionSnapshotUpdateOne {
	trsuo.mutation.SetNextID(id)
	return trsuo
}

// SetNillableNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetNillableNextID(id *int) *TravelRestrictionSnapshotUpdateOne {
	if id != nil {
		trsuo = trsuo.SetNextID(*id)
	}
	return trsuo
}

// SetNext sets the "next" edge to the TravelRestrictionSnapshot entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetNext(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotUpdateOne {
	return trsuo.SetNextID(t.ID)
}

// SetPreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetPreviousID(id int) *TravelRestrictionSnapshotUpdateOne {
	trsuo.mutation.SetPreviousID(id)
	return trsuo
}

// SetNillablePreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetNillablePreviousID(id *int) *TravelRestrictionSnapshotUpdateOne {
	if id != nil {
		trsuo = trsuo.SetPreviousID(*id)
	}
	return trsuo
}

// SetPrevious sets the "previous" edge to the TravelRestrictionSnapshot entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SetPrevious(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotUpdateOne {
	return trsuo.SetPreviousID(t.ID)
}

// Mutation returns the TravelRestrictionSnapshotMutation object of the builder.
func (trsuo *TravelRestrictionSnapshotUpdateOne) Mutation() *TravelRestrictionSnapshotMutation {
	return trsuo.mutation
}

// ClearNext clears the "next" edge to the TravelRestrictionSnapshot entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) ClearNext() *TravelRestrictionSnapshotUpdateOne {
	trsuo.mutation.ClearNext()
	return trsuo
}

// ClearPrevious clears the "previous" edge to the TravelRestrictionSnapshot entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) ClearPrevious() *TravelRestrictionSnapshotUpdateOne {
	trsuo.mutation.ClearPrevious()
	return trsuo
}

// Save executes the query and returns the updated TravelRestrictionSnapshot entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) Save(ctx context.Context) (*TravelRestrictionSnapshot, error) {
	var (
		err  error
		node *TravelRestrictionSnapshot
	)
	if len(trsuo.hooks) == 0 {
		node, err = trsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TravelRestrictionSnapshotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			trsuo.mutation = mutation
			node, err = trsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(trsuo.hooks) - 1; i >= 0; i-- {
			mut = trsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (trsuo *TravelRestrictionSnapshotUpdateOne) SaveX(ctx context.Context) *TravelRestrictionSnapshot {
	node, err := trsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (trsuo *TravelRestrictionSnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := trsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trsuo *TravelRestrictionSnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := trsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (trsuo *TravelRestrictionSnapshotUpdateOne) sqlSave(ctx context.Context) (_node *TravelRestrictionSnapshot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   travelrestrictionsnapshot.Table,
			Columns: travelrestrictionsnapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: travelrestrictionsnapshot.FieldID,
			},
		},
	}
	id, ok := trsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TravelRestrictionSnapshot.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := trsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if trsuo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   travelrestrictionsnapshot.NextTable,
			Columns: []string{travelrestrictionsnapshot.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := trsuo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   travelrestrictionsnapshot.NextTable,
			Columns: []string{travelrestrictionsnapshot.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if trsuo.mutation.PreviousCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   travelrestrictionsnapshot.PreviousTable,
			Columns: []string{travelrestrictionsnapshot.PreviousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := trsuo.mutation.PreviousIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   travelrestrictionsnapshot.PreviousTable,
			Columns: []string{travelrestrictionsnapshot.PreviousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TravelRestrictionSnapshot{config: trsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, trsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{travelrestrictionsnapshot.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

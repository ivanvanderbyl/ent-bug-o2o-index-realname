// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/ivanvanderbyl/entbug/ent/predicate"
	"github.com/ivanvanderbyl/entbug/ent/travelrestrictionsnapshot"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTravelRestrictionSnapshot = "TravelRestrictionSnapshot"
)

// TravelRestrictionSnapshotMutation represents an operation that mutates the TravelRestrictionSnapshot nodes in the graph.
type TravelRestrictionSnapshotMutation struct {
	config
	op              Op
	typ             string
	id              *int
	version         *int64
	addversion      *int64
	data            *map[string]ent.Value
	timestamp       *time.Time
	clearedFields   map[string]struct{}
	next            *int
	clearednext     bool
	previous        *int
	clearedprevious bool
	done            bool
	oldValue        func(context.Context) (*TravelRestrictionSnapshot, error)
	predicates      []predicate.TravelRestrictionSnapshot
}

var _ ent.Mutation = (*TravelRestrictionSnapshotMutation)(nil)

// travelrestrictionsnapshotOption allows management of the mutation configuration using functional options.
type travelrestrictionsnapshotOption func(*TravelRestrictionSnapshotMutation)

// newTravelRestrictionSnapshotMutation creates new mutation for the TravelRestrictionSnapshot entity.
func newTravelRestrictionSnapshotMutation(c config, op Op, opts ...travelrestrictionsnapshotOption) *TravelRestrictionSnapshotMutation {
	m := &TravelRestrictionSnapshotMutation{
		config:        c,
		op:            op,
		typ:           TypeTravelRestrictionSnapshot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTravelRestrictionSnapshotID sets the ID field of the mutation.
func withTravelRestrictionSnapshotID(id int) travelrestrictionsnapshotOption {
	return func(m *TravelRestrictionSnapshotMutation) {
		var (
			err   error
			once  sync.Once
			value *TravelRestrictionSnapshot
		)
		m.oldValue = func(ctx context.Context) (*TravelRestrictionSnapshot, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TravelRestrictionSnapshot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTravelRestrictionSnapshot sets the old TravelRestrictionSnapshot of the mutation.
func withTravelRestrictionSnapshot(node *TravelRestrictionSnapshot) travelrestrictionsnapshotOption {
	return func(m *TravelRestrictionSnapshotMutation) {
		m.oldValue = func(context.Context) (*TravelRestrictionSnapshot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TravelRestrictionSnapshotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TravelRestrictionSnapshotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *TravelRestrictionSnapshotMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetVersion sets the "version" field.
func (m *TravelRestrictionSnapshotMutation) SetVersion(i int64) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TravelRestrictionSnapshotMutation) Version() (r int64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TravelRestrictionSnapshot entity.
// If the TravelRestrictionSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TravelRestrictionSnapshotMutation) OldVersion(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *TravelRestrictionSnapshotMutation) AddVersion(i int64) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TravelRestrictionSnapshotMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *TravelRestrictionSnapshotMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetData sets the "data" field.
func (m *TravelRestrictionSnapshotMutation) SetData(value map[string]ent.Value) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *TravelRestrictionSnapshotMutation) Data() (r map[string]ent.Value, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the TravelRestrictionSnapshot entity.
// If the TravelRestrictionSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TravelRestrictionSnapshotMutation) OldData(ctx context.Context) (v map[string]ent.Value, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *TravelRestrictionSnapshotMutation) ResetData() {
	m.data = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *TravelRestrictionSnapshotMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *TravelRestrictionSnapshotMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the TravelRestrictionSnapshot entity.
// If the TravelRestrictionSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TravelRestrictionSnapshotMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *TravelRestrictionSnapshotMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetNextID sets the "next" edge to the TravelRestrictionSnapshot entity by id.
func (m *TravelRestrictionSnapshotMutation) SetNextID(id int) {
	m.next = &id
}

// ClearNext clears the "next" edge to the TravelRestrictionSnapshot entity.
func (m *TravelRestrictionSnapshotMutation) ClearNext() {
	m.clearednext = true
}

// NextCleared returns if the "next" edge to the TravelRestrictionSnapshot entity was cleared.
func (m *TravelRestrictionSnapshotMutation) NextCleared() bool {
	return m.clearednext
}

// NextID returns the "next" edge ID in the mutation.
func (m *TravelRestrictionSnapshotMutation) NextID() (id int, exists bool) {
	if m.next != nil {
		return *m.next, true
	}
	return
}

// NextIDs returns the "next" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NextID instead. It exists only for internal usage by the builders.
func (m *TravelRestrictionSnapshotMutation) NextIDs() (ids []int) {
	if id := m.next; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNext resets all changes to the "next" edge.
func (m *TravelRestrictionSnapshotMutation) ResetNext() {
	m.next = nil
	m.clearednext = false
}

// SetPreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by id.
func (m *TravelRestrictionSnapshotMutation) SetPreviousID(id int) {
	m.previous = &id
}

// ClearPrevious clears the "previous" edge to the TravelRestrictionSnapshot entity.
func (m *TravelRestrictionSnapshotMutation) ClearPrevious() {
	m.clearedprevious = true
}

// PreviousCleared returns if the "previous" edge to the TravelRestrictionSnapshot entity was cleared.
func (m *TravelRestrictionSnapshotMutation) PreviousCleared() bool {
	return m.clearedprevious
}

// PreviousID returns the "previous" edge ID in the mutation.
func (m *TravelRestrictionSnapshotMutation) PreviousID() (id int, exists bool) {
	if m.previous != nil {
		return *m.previous, true
	}
	return
}

// PreviousIDs returns the "previous" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PreviousID instead. It exists only for internal usage by the builders.
func (m *TravelRestrictionSnapshotMutation) PreviousIDs() (ids []int) {
	if id := m.previous; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrevious resets all changes to the "previous" edge.
func (m *TravelRestrictionSnapshotMutation) ResetPrevious() {
	m.previous = nil
	m.clearedprevious = false
}

// Op returns the operation name.
func (m *TravelRestrictionSnapshotMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TravelRestrictionSnapshot).
func (m *TravelRestrictionSnapshotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TravelRestrictionSnapshotMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.version != nil {
		fields = append(fields, travelrestrictionsnapshot.FieldVersion)
	}
	if m.data != nil {
		fields = append(fields, travelrestrictionsnapshot.FieldData)
	}
	if m.timestamp != nil {
		fields = append(fields, travelrestrictionsnapshot.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TravelRestrictionSnapshotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		return m.Version()
	case travelrestrictionsnapshot.FieldData:
		return m.Data()
	case travelrestrictionsnapshot.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TravelRestrictionSnapshotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		return m.OldVersion(ctx)
	case travelrestrictionsnapshot.FieldData:
		return m.OldData(ctx)
	case travelrestrictionsnapshot.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown TravelRestrictionSnapshot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TravelRestrictionSnapshotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case travelrestrictionsnapshot.FieldData:
		v, ok := value.(map[string]ent.Value)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case travelrestrictionsnapshot.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown TravelRestrictionSnapshot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TravelRestrictionSnapshotMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, travelrestrictionsnapshot.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TravelRestrictionSnapshotMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TravelRestrictionSnapshotMutation) AddField(name string, value ent.Value) error {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown TravelRestrictionSnapshot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TravelRestrictionSnapshotMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TravelRestrictionSnapshotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TravelRestrictionSnapshotMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TravelRestrictionSnapshot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TravelRestrictionSnapshotMutation) ResetField(name string) error {
	switch name {
	case travelrestrictionsnapshot.FieldVersion:
		m.ResetVersion()
		return nil
	case travelrestrictionsnapshot.FieldData:
		m.ResetData()
		return nil
	case travelrestrictionsnapshot.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown TravelRestrictionSnapshot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TravelRestrictionSnapshotMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.next != nil {
		edges = append(edges, travelrestrictionsnapshot.EdgeNext)
	}
	if m.previous != nil {
		edges = append(edges, travelrestrictionsnapshot.EdgePrevious)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TravelRestrictionSnapshotMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case travelrestrictionsnapshot.EdgeNext:
		if id := m.next; id != nil {
			return []ent.Value{*id}
		}
	case travelrestrictionsnapshot.EdgePrevious:
		if id := m.previous; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TravelRestrictionSnapshotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TravelRestrictionSnapshotMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TravelRestrictionSnapshotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearednext {
		edges = append(edges, travelrestrictionsnapshot.EdgeNext)
	}
	if m.clearedprevious {
		edges = append(edges, travelrestrictionsnapshot.EdgePrevious)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TravelRestrictionSnapshotMutation) EdgeCleared(name string) bool {
	switch name {
	case travelrestrictionsnapshot.EdgeNext:
		return m.clearednext
	case travelrestrictionsnapshot.EdgePrevious:
		return m.clearedprevious
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TravelRestrictionSnapshotMutation) ClearEdge(name string) error {
	switch name {
	case travelrestrictionsnapshot.EdgeNext:
		m.ClearNext()
		return nil
	case travelrestrictionsnapshot.EdgePrevious:
		m.ClearPrevious()
		return nil
	}
	return fmt.Errorf("unknown TravelRestrictionSnapshot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TravelRestrictionSnapshotMutation) ResetEdge(name string) error {
	switch name {
	case travelrestrictionsnapshot.EdgeNext:
		m.ResetNext()
		return nil
	case travelrestrictionsnapshot.EdgePrevious:
		m.ResetPrevious()
		return nil
	}
	return fmt.Errorf("unknown TravelRestrictionSnapshot edge %s", name)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ivanvanderbyl/entbug/ent/predicate"
	"github.com/ivanvanderbyl/entbug/ent/travelrestrictionsnapshot"
)

// TravelRestrictionSnapshotQuery is the builder for querying TravelRestrictionSnapshot entities.
type TravelRestrictionSnapshotQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.TravelRestrictionSnapshot
	// eager-loading edges.
	withNext     *TravelRestrictionSnapshotQuery
	withPrevious *TravelRestrictionSnapshotQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TravelRestrictionSnapshotQuery builder.
func (trsq *TravelRestrictionSnapshotQuery) Where(ps ...predicate.TravelRestrictionSnapshot) *TravelRestrictionSnapshotQuery {
	trsq.predicates = append(trsq.predicates, ps...)
	return trsq
}

// Limit adds a limit step to the query.
func (trsq *TravelRestrictionSnapshotQuery) Limit(limit int) *TravelRestrictionSnapshotQuery {
	trsq.limit = &limit
	return trsq
}

// Offset adds an offset step to the query.
func (trsq *TravelRestrictionSnapshotQuery) Offset(offset int) *TravelRestrictionSnapshotQuery {
	trsq.offset = &offset
	return trsq
}

// Order adds an order step to the query.
func (trsq *TravelRestrictionSnapshotQuery) Order(o ...OrderFunc) *TravelRestrictionSnapshotQuery {
	trsq.order = append(trsq.order, o...)
	return trsq
}

// QueryNext chains the current query on the "next" edge.
func (trsq *TravelRestrictionSnapshotQuery) QueryNext() *TravelRestrictionSnapshotQuery {
	query := &TravelRestrictionSnapshotQuery{config: trsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(travelrestrictionsnapshot.Table, travelrestrictionsnapshot.FieldID, selector),
			sqlgraph.To(travelrestrictionsnapshot.Table, travelrestrictionsnapshot.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, travelrestrictionsnapshot.NextTable, travelrestrictionsnapshot.NextColumn),
		)
		fromU = sqlgraph.SetNeighbors(trsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrevious chains the current query on the "previous" edge.
func (trsq *TravelRestrictionSnapshotQuery) QueryPrevious() *TravelRestrictionSnapshotQuery {
	query := &TravelRestrictionSnapshotQuery{config: trsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(travelrestrictionsnapshot.Table, travelrestrictionsnapshot.FieldID, selector),
			sqlgraph.To(travelrestrictionsnapshot.Table, travelrestrictionsnapshot.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, travelrestrictionsnapshot.PreviousTable, travelrestrictionsnapshot.PreviousColumn),
		)
		fromU = sqlgraph.SetNeighbors(trsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TravelRestrictionSnapshot entity from the query.
// Returns a *NotFoundError when no TravelRestrictionSnapshot was found.
func (trsq *TravelRestrictionSnapshotQuery) First(ctx context.Context) (*TravelRestrictionSnapshot, error) {
	nodes, err := trsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{travelrestrictionsnapshot.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) FirstX(ctx context.Context) *TravelRestrictionSnapshot {
	node, err := trsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TravelRestrictionSnapshot ID from the query.
// Returns a *NotFoundError when no TravelRestrictionSnapshot ID was found.
func (trsq *TravelRestrictionSnapshotQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{travelrestrictionsnapshot.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) FirstIDX(ctx context.Context) int {
	id, err := trsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TravelRestrictionSnapshot entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TravelRestrictionSnapshot entity is not found.
// Returns a *NotFoundError when no TravelRestrictionSnapshot entities are found.
func (trsq *TravelRestrictionSnapshotQuery) Only(ctx context.Context) (*TravelRestrictionSnapshot, error) {
	nodes, err := trsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		return nil, &NotSingularError{travelrestrictionsnapshot.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) OnlyX(ctx context.Context) *TravelRestrictionSnapshot {
	node, err := trsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TravelRestrictionSnapshot ID in the query.
// Returns a *NotSingularError when exactly one TravelRestrictionSnapshot ID is not found.
// Returns a *NotFoundError when no entities are found.
func (trsq *TravelRestrictionSnapshotQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = &NotSingularError{travelrestrictionsnapshot.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) OnlyIDX(ctx context.Context) int {
	id, err := trsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TravelRestrictionSnapshots.
func (trsq *TravelRestrictionSnapshotQuery) All(ctx context.Context) ([]*TravelRestrictionSnapshot, error) {
	if err := trsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return trsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) AllX(ctx context.Context) []*TravelRestrictionSnapshot {
	nodes, err := trsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TravelRestrictionSnapshot IDs.
func (trsq *TravelRestrictionSnapshotQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := trsq.Select(travelrestrictionsnapshot.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) IDsX(ctx context.Context) []int {
	ids, err := trsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trsq *TravelRestrictionSnapshotQuery) Count(ctx context.Context) (int, error) {
	if err := trsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return trsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) CountX(ctx context.Context) int {
	count, err := trsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trsq *TravelRestrictionSnapshotQuery) Exist(ctx context.Context) (bool, error) {
	if err := trsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return trsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (trsq *TravelRestrictionSnapshotQuery) ExistX(ctx context.Context) bool {
	exist, err := trsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TravelRestrictionSnapshotQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trsq *TravelRestrictionSnapshotQuery) Clone() *TravelRestrictionSnapshotQuery {
	if trsq == nil {
		return nil
	}
	return &TravelRestrictionSnapshotQuery{
		config:       trsq.config,
		limit:        trsq.limit,
		offset:       trsq.offset,
		order:        append([]OrderFunc{}, trsq.order...),
		predicates:   append([]predicate.TravelRestrictionSnapshot{}, trsq.predicates...),
		withNext:     trsq.withNext.Clone(),
		withPrevious: trsq.withPrevious.Clone(),
		// clone intermediate query.
		sql:  trsq.sql.Clone(),
		path: trsq.path,
	}
}

// WithNext tells the query-builder to eager-load the nodes that are connected to
// the "next" edge. The optional arguments are used to configure the query builder of the edge.
func (trsq *TravelRestrictionSnapshotQuery) WithNext(opts ...func(*TravelRestrictionSnapshotQuery)) *TravelRestrictionSnapshotQuery {
	query := &TravelRestrictionSnapshotQuery{config: trsq.config}
	for _, opt := range opts {
		opt(query)
	}
	trsq.withNext = query
	return trsq
}

// WithPrevious tells the query-builder to eager-load the nodes that are connected to
// the "previous" edge. The optional arguments are used to configure the query builder of the edge.
func (trsq *TravelRestrictionSnapshotQuery) WithPrevious(opts ...func(*TravelRestrictionSnapshotQuery)) *TravelRestrictionSnapshotQuery {
	query := &TravelRestrictionSnapshotQuery{config: trsq.config}
	for _, opt := range opts {
		opt(query)
	}
	trsq.withPrevious = query
	return trsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Version int64 `json:"version,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TravelRestrictionSnapshot.Query().
//		GroupBy(travelrestrictionsnapshot.FieldVersion).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (trsq *TravelRestrictionSnapshotQuery) GroupBy(field string, fields ...string) *TravelRestrictionSnapshotGroupBy {
	group := &TravelRestrictionSnapshotGroupBy{config: trsq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := trsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return trsq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Version int64 `json:"version,omitempty"`
//	}
//
//	client.TravelRestrictionSnapshot.Query().
//		Select(travelrestrictionsnapshot.FieldVersion).
//		Scan(ctx, &v)
//
func (trsq *TravelRestrictionSnapshotQuery) Select(field string, fields ...string) *TravelRestrictionSnapshotSelect {
	trsq.fields = append([]string{field}, fields...)
	return &TravelRestrictionSnapshotSelect{TravelRestrictionSnapshotQuery: trsq}
}

func (trsq *TravelRestrictionSnapshotQuery) prepareQuery(ctx context.Context) error {
	for _, f := range trsq.fields {
		if !travelrestrictionsnapshot.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if trsq.path != nil {
		prev, err := trsq.path(ctx)
		if err != nil {
			return err
		}
		trsq.sql = prev
	}
	return nil
}

func (trsq *TravelRestrictionSnapshotQuery) sqlAll(ctx context.Context) ([]*TravelRestrictionSnapshot, error) {
	var (
		nodes       = []*TravelRestrictionSnapshot{}
		withFKs     = trsq.withFKs
		_spec       = trsq.querySpec()
		loadedTypes = [2]bool{
			trsq.withNext != nil,
			trsq.withPrevious != nil,
		}
	)
	if trsq.withNext != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, travelrestrictionsnapshot.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TravelRestrictionSnapshot{config: trsq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, trsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := trsq.withNext; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TravelRestrictionSnapshot)
		for i := range nodes {
			if fk := nodes[i].travel_restriction_snapshot_previous; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(travelrestrictionsnapshot.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "travel_restriction_snapshot_previous" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Next = n
			}
		}
	}

	if query := trsq.withPrevious; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*TravelRestrictionSnapshot)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.TravelRestrictionSnapshot(func(s *sql.Selector) {
			s.Where(sql.InValues(travelrestrictionsnapshot.PreviousColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.travel_restriction_snapshot_previous
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "travel_restriction_snapshot_previous" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "travel_restriction_snapshot_previous" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Previous = n
		}
	}

	return nodes, nil
}

func (trsq *TravelRestrictionSnapshotQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trsq.querySpec()
	return sqlgraph.CountNodes(ctx, trsq.driver, _spec)
}

func (trsq *TravelRestrictionSnapshotQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := trsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (trsq *TravelRestrictionSnapshotQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   travelrestrictionsnapshot.Table,
			Columns: travelrestrictionsnapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: travelrestrictionsnapshot.FieldID,
			},
		},
		From:   trsq.sql,
		Unique: true,
	}
	if fields := trsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, travelrestrictionsnapshot.FieldID)
		for i := range fields {
			if fields[i] != travelrestrictionsnapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := trsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, travelrestrictionsnapshot.ValidColumn)
			}
		}
	}
	return _spec
}

func (trsq *TravelRestrictionSnapshotQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(trsq.driver.Dialect())
	t1 := builder.Table(travelrestrictionsnapshot.Table)
	selector := builder.Select(t1.Columns(travelrestrictionsnapshot.Columns...)...).From(t1)
	if trsq.sql != nil {
		selector = trsq.sql
		selector.Select(selector.Columns(travelrestrictionsnapshot.Columns...)...)
	}
	for _, p := range trsq.predicates {
		p(selector)
	}
	for _, p := range trsq.order {
		p(selector, travelrestrictionsnapshot.ValidColumn)
	}
	if offset := trsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TravelRestrictionSnapshotGroupBy is the group-by builder for TravelRestrictionSnapshot entities.
type TravelRestrictionSnapshotGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trsgb *TravelRestrictionSnapshotGroupBy) Aggregate(fns ...AggregateFunc) *TravelRestrictionSnapshotGroupBy {
	trsgb.fns = append(trsgb.fns, fns...)
	return trsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (trsgb *TravelRestrictionSnapshotGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := trsgb.path(ctx)
	if err != nil {
		return err
	}
	trsgb.sql = query
	return trsgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := trsgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(trsgb.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := trsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) StringsX(ctx context.Context) []string {
	v, err := trsgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trsgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) StringX(ctx context.Context) string {
	v, err := trsgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(trsgb.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := trsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) IntsX(ctx context.Context) []int {
	v, err := trsgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trsgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) IntX(ctx context.Context) int {
	v, err := trsgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(trsgb.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := trsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := trsgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trsgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) Float64X(ctx context.Context) float64 {
	v, err := trsgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(trsgb.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := trsgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := trsgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trsgb *TravelRestrictionSnapshotGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trsgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trsgb *TravelRestrictionSnapshotGroupBy) BoolX(ctx context.Context) bool {
	v, err := trsgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trsgb *TravelRestrictionSnapshotGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range trsgb.fields {
		if !travelrestrictionsnapshot.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := trsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trsgb *TravelRestrictionSnapshotGroupBy) sqlQuery() *sql.Selector {
	selector := trsgb.sql
	columns := make([]string, 0, len(trsgb.fields)+len(trsgb.fns))
	columns = append(columns, trsgb.fields...)
	for _, fn := range trsgb.fns {
		columns = append(columns, fn(selector, travelrestrictionsnapshot.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(trsgb.fields...)
}

// TravelRestrictionSnapshotSelect is the builder for selecting fields of TravelRestrictionSnapshot entities.
type TravelRestrictionSnapshotSelect struct {
	*TravelRestrictionSnapshotQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (trss *TravelRestrictionSnapshotSelect) Scan(ctx context.Context, v interface{}) error {
	if err := trss.prepareQuery(ctx); err != nil {
		return err
	}
	trss.sql = trss.TravelRestrictionSnapshotQuery.sqlQuery(ctx)
	return trss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) ScanX(ctx context.Context, v interface{}) {
	if err := trss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Strings(ctx context.Context) ([]string, error) {
	if len(trss.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := trss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) StringsX(ctx context.Context) []string {
	v, err := trss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) StringX(ctx context.Context) string {
	v, err := trss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Ints(ctx context.Context) ([]int, error) {
	if len(trss.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := trss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) IntsX(ctx context.Context) []int {
	v, err := trss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) IntX(ctx context.Context) int {
	v, err := trss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(trss.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := trss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) Float64sX(ctx context.Context) []float64 {
	v, err := trss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) Float64X(ctx context.Context) float64 {
	v, err := trss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(trss.fields) > 1 {
		return nil, errors.New("ent: TravelRestrictionSnapshotSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := trss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) BoolsX(ctx context.Context) []bool {
	v, err := trss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (trss *TravelRestrictionSnapshotSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{travelrestrictionsnapshot.Label}
	default:
		err = fmt.Errorf("ent: TravelRestrictionSnapshotSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trss *TravelRestrictionSnapshotSelect) BoolX(ctx context.Context) bool {
	v, err := trss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trss *TravelRestrictionSnapshotSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := trss.sqlQuery().Query()
	if err := trss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trss *TravelRestrictionSnapshotSelect) sqlQuery() sql.Querier {
	selector := trss.sql
	selector.Select(selector.Columns(trss.fields...)...)
	return selector
}

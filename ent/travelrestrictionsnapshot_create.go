// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ivanvanderbyl/entbug/ent/travelrestrictionsnapshot"
)

// TravelRestrictionSnapshotCreate is the builder for creating a TravelRestrictionSnapshot entity.
type TravelRestrictionSnapshotCreate struct {
	config
	mutation *TravelRestrictionSnapshotMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (trsc *TravelRestrictionSnapshotCreate) SetVersion(i int64) *TravelRestrictionSnapshotCreate {
	trsc.mutation.SetVersion(i)
	return trsc
}

// SetData sets the "data" field.
func (trsc *TravelRestrictionSnapshotCreate) SetData(m map[string]ent.Value) *TravelRestrictionSnapshotCreate {
	trsc.mutation.SetData(m)
	return trsc
}

// SetTimestamp sets the "timestamp" field.
func (trsc *TravelRestrictionSnapshotCreate) SetTimestamp(t time.Time) *TravelRestrictionSnapshotCreate {
	trsc.mutation.SetTimestamp(t)
	return trsc
}

// SetNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID.
func (trsc *TravelRestrictionSnapshotCreate) SetNextID(id int) *TravelRestrictionSnapshotCreate {
	trsc.mutation.SetNextID(id)
	return trsc
}

// SetNillableNextID sets the "next" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsc *TravelRestrictionSnapshotCreate) SetNillableNextID(id *int) *TravelRestrictionSnapshotCreate {
	if id != nil {
		trsc = trsc.SetNextID(*id)
	}
	return trsc
}

// SetNext sets the "next" edge to the TravelRestrictionSnapshot entity.
func (trsc *TravelRestrictionSnapshotCreate) SetNext(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotCreate {
	return trsc.SetNextID(t.ID)
}

// SetPreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID.
func (trsc *TravelRestrictionSnapshotCreate) SetPreviousID(id int) *TravelRestrictionSnapshotCreate {
	trsc.mutation.SetPreviousID(id)
	return trsc
}

// SetNillablePreviousID sets the "previous" edge to the TravelRestrictionSnapshot entity by ID if the given value is not nil.
func (trsc *TravelRestrictionSnapshotCreate) SetNillablePreviousID(id *int) *TravelRestrictionSnapshotCreate {
	if id != nil {
		trsc = trsc.SetPreviousID(*id)
	}
	return trsc
}

// SetPrevious sets the "previous" edge to the TravelRestrictionSnapshot entity.
func (trsc *TravelRestrictionSnapshotCreate) SetPrevious(t *TravelRestrictionSnapshot) *TravelRestrictionSnapshotCreate {
	return trsc.SetPreviousID(t.ID)
}

// Mutation returns the TravelRestrictionSnapshotMutation object of the builder.
func (trsc *TravelRestrictionSnapshotCreate) Mutation() *TravelRestrictionSnapshotMutation {
	return trsc.mutation
}

// Save creates the TravelRestrictionSnapshot in the database.
func (trsc *TravelRestrictionSnapshotCreate) Save(ctx context.Context) (*TravelRestrictionSnapshot, error) {
	var (
		err  error
		node *TravelRestrictionSnapshot
	)
	if len(trsc.hooks) == 0 {
		if err = trsc.check(); err != nil {
			return nil, err
		}
		node, err = trsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TravelRestrictionSnapshotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = trsc.check(); err != nil {
				return nil, err
			}
			trsc.mutation = mutation
			node, err = trsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(trsc.hooks) - 1; i >= 0; i-- {
			mut = trsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, trsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trsc *TravelRestrictionSnapshotCreate) SaveX(ctx context.Context) *TravelRestrictionSnapshot {
	v, err := trsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (trsc *TravelRestrictionSnapshotCreate) check() error {
	if _, ok := trsc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	if v, ok := trsc.mutation.Version(); ok {
		if err := travelrestrictionsnapshot.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if _, ok := trsc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New("ent: missing required field \"data\"")}
	}
	if _, ok := trsc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New("ent: missing required field \"timestamp\"")}
	}
	return nil
}

func (trsc *TravelRestrictionSnapshotCreate) sqlSave(ctx context.Context) (*TravelRestrictionSnapshot, error) {
	_node, _spec := trsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (trsc *TravelRestrictionSnapshotCreate) createSpec() (*TravelRestrictionSnapshot, *sqlgraph.CreateSpec) {
	var (
		_node = &TravelRestrictionSnapshot{config: trsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: travelrestrictionsnapshot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: travelrestrictionsnapshot.FieldID,
			},
		}
	)
	if value, ok := trsc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: travelrestrictionsnapshot.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := trsc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: travelrestrictionsnapshot.FieldData,
		})
		_node.Data = value
	}
	if value, ok := trsc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: travelrestrictionsnapshot.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if nodes := trsc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   travelrestrictionsnapshot.NextTable,
			Columns: []string{travelrestrictionsnapshot.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trsc.mutation.PreviousIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   travelrestrictionsnapshot.PreviousTable,
			Columns: []string{travelrestrictionsnapshot.PreviousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: travelrestrictionsnapshot.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TravelRestrictionSnapshotCreateBulk is the builder for creating many TravelRestrictionSnapshot entities in bulk.
type TravelRestrictionSnapshotCreateBulk struct {
	config
	builders []*TravelRestrictionSnapshotCreate
}

// Save creates the TravelRestrictionSnapshot entities in the database.
func (trscb *TravelRestrictionSnapshotCreateBulk) Save(ctx context.Context) ([]*TravelRestrictionSnapshot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trscb.builders))
	nodes := make([]*TravelRestrictionSnapshot, len(trscb.builders))
	mutators := make([]Mutator, len(trscb.builders))
	for i := range trscb.builders {
		func(i int, root context.Context) {
			builder := trscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TravelRestrictionSnapshotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trscb *TravelRestrictionSnapshotCreateBulk) SaveX(ctx context.Context) []*TravelRestrictionSnapshot {
	v, err := trscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
